Goクイズで学ぶメソッドセット

Go言語仕様輪読会
2021/04/15

task4233
@task4233

* 自己紹介

*task4233*(Takashi*MIMA)*

趣味と実益を兼ねてGoを書いています

.link https://go-review.googlesource.com/c/go/+/288472 Go本体へのコントリビュート経験があります

.image ./images/go-proposal.PNG 400 682

* 今回は、Goのメソッドセットという概念を扱います
*ゴール*
インタフェースを「実装する」という概念を通して、*メソッドセットとは何なのか*
*理解すること*


*理解するメリット*
Goの他の仕様を理解する助けになる

.link https://golang.org/ref/spec#Calls Method calls - The Go Programming Language Specification

.link https://golang.org/ref/spec#Interface_types Interface types - The Go Programming Language Specification

* おさらい：メソッドとは

レシーバを伴う関数

.image ./images/method_dif.PNG 300 700

* レシーバの型の制約

- レシーバの型は、defined typeもしくはdefined typeのポインタ型でなくてはならない
- レシーバの型Tおよび*TのTを、receiver base typeと呼ぶ
- ただしreceiver base typeは、インタフェース型もしくはポインタ型であってはならない

.image ./images/method_dif.PNG 300 700

* メソッドセットとは

メソッドセットは、*型* に関連付けられた *メソッドの集合* のこと
下記の例で、型 `T` のメソッドセットと、型 `*T` のメソッドセットについて考えてみます

.play ./examples/base/method_sets_pointer.go

* 型 Tのメソッドセット

型 `T` のメソッドセットは、*レシーバ型* `T` *で宣言された*
*全てのメソッドの集合*

.play ./examples/base/method_sets.go

型 `Num` のメソッドセット

- *A1*
- *B1*

* 型 *Tのメソッドセット

型 `*T` のメソッドセットは、*レシーバ型* `T` *または* `*T` *で宣言された*
*全てのメソッドの集合*

.play ./examples/base/method_sets.go

型 `*Num` のメソッドセット

- A1
- B1
- *A2*
- *B2*

* インタフェース型のメソッドセット

インタフェース型のメソッドセットは、その *インタフェース定義で列挙される*
*メソッドの集合*

.play ./examples/base/interface.go

インタフェース型 `I` のメソッドセット

- A1
- B1
- A2
- B2

* メソッドセットの詳細な定義

- インタフェース型のメソッドセットは、そのインタフェース定義で列挙されるメソッドの集合

- 型 `T` のメソッドセットは、レシーバ型 `T` で宣言された全てのメソッドの集合

- 型 `*T` のメソッドセットは、レシーバ型 `T` または `*T` で宣言された全てのメソッドの集合

- *埋め込みフィールドを持つ構造体については、更なる規則が適用される*(今回は時間が足りないので割愛)

- *それ以外の型は、空のメソッドセットを持つ*

* 型Tがインタフェース Iを「実装する」とは

型 `T` のメソッドセットがインタフェース `I` のメソッドセットを全て含むこと

.image ./images/implemented.png 290 900

* インタフェースを「実装している」ときは代入が可能

下記の例で、型CatはAnimalインタフェースを「実装している」

.play ./examples/interface/example.go

インタフェースを「実装している」型は、Assignability(代入可能性)のルールにより、そのインタフェース型の変数に代入してもコンパイルエラーにならない

* インタフェースを「実装していない」ときの代入はコンパイルエラー

下記の例で、Cat型はAnimalインタフェースを「実装していない」ので、代入時にコンパイルエラーになる

.play ./examples/interface/error.go

* 1. インタフェースの実装の基礎

「実装している」か否かはメソッドセットを意識すると良い

* Goクイズ：インタフェース型のメソッドセット

Cat型はAnimalインタフェースを実装していますか？

.play ./examples/interface/quiz.go

* 解答と解説：インタフェース型のメソッドセット

- 返り値が異なっているのでメソッドセットが異なるから実装していない
- 仮引数リストが異なる場合も同様

.play ./examples/interface/answer.go

* 2. 型 T のインタフェース実装

* Goクイズ：型 T のインタフェース実装

型 `EmptyError` は、 `error` インタフェースを実装していますか？

.play ./examples/value_receiver/quiz.go

* 解答と解説：型 T のインタフェース実装

- 型 `EmptyError` は `error` インタフェースを「実装していない」
- 型 `EmptyError` のメソッドセットは空
- `error` インタフェースのメソッドセットは `Error`

.play ./examples/value_receiver/answer.go

* コラム：メソッド呼び出し時の特別ルール
x.m()というメソッド呼び出しについて、 *xがaddressable* で *&xのメソッドセットがmを含んでいる* 場合 、x.m()は(&x).m()の省略形になる

.link https://golang.org/ref/spec#Address_operators Address operators - The Go Programming Language Specification

.play ./examples/column/method_call.go

* 3. 型 *T のインタフェース実装

型 `*T` のメソッドセットは、レシーバ型 `T` または `*T` で宣言された全てのメソッドの集合

* Goクイズ：型 *T のインタフェースの実装

型 `*EmptyError` は、 `error` インタフェースを実装していますか？

.play ./examples/pointer_receiver/quiz.go

* 解答と解説：型 *T のインタフェースの実装

- 型 `*EmptyError` は `error` インタフェースを「実装している」
- 型 `*EmptyError` のメソッドセットは `Error`
- `error` インタフェースのメソッドセットは `Error`

.play ./examples/pointer_receiver/answer.go

* 4. 空のインタフェース実装

どんな型でも、デフォルトで空のメソッドセットを持つ

* Goクイズ：空のインタフェース

`nil` は、 `Empty` インタフェースを実装していますか？

.play ./examples/empty_interface/quiz.go

* 解答と解説：空のインタフェース

- インタフェース以外の全ての型は、デフォルトで空のメソッドセットを持つ

- 空のインタフェースは空のメソッドセットを持つので、全ての型の値を代入可能

.play ./examples/empty_interface/answer.go

* コラム：interfaceの値を利用するためには型アサーションが必要

.play ./examples/column/empty_interface.go

* まとめ

- どんな型でもデフォルトで空のメソッドセットを持つ

メソッドセットの定義

- インタフェース型のメソッドセットは、そのインタフェース定義で列挙されるメソッドの集合

- 型 `T` のメソッドセットは、レシーバ型 `T` で宣言された全てのメソッドの集合

- 型 `*T` のメソッドセットは、レシーバ型 `T` または `*T` で宣言された全てのメソッドの集合

- 埋め込みフィールドを持つ構造体については、更なる規則が適用される

- それ以外の型は、空のメソッドセットを持つ
